"""
M√≥dulo de conexi√≥n y operaciones con MongoDB Atlas
"""

import os
from datetime import datetime, timedelta
from typing import List, Dict, Optional
from pymongo import MongoClient, DESCENDING
from pymongo.errors import ConnectionFailure, ServerSelectionTimeoutError
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

class EmotionDatabase:
    """Clase para manejar operaciones con MongoDB"""
    
    def __init__(self):
        """Inicializa la conexi√≥n a MongoDB Atlas"""
        self.uri = os.getenv('MONGODB_URI')
        self.db_name = os.getenv('MONGODB_DATABASE', 'Emotions')
        self.collection_name = os.getenv('MONGODB_COLLECTION', 'emotions_log')
        
        if not self.uri:
            raise ValueError("‚ö†Ô∏è  MONGODB_URI no est√° configurado en el archivo .env")
        
        self.client = None
        self.db = None
        self.collection = None
        self._connect()
    
    def _connect(self):
        """Establece conexi√≥n con MongoDB"""
        try:
            print("üîÑ Conectando a MongoDB Atlas...")
            self.client = MongoClient(
                self.uri,
                serverSelectionTimeoutMS=5000,  # 5 segundos timeout
                connectTimeoutMS=10000
            )
            
            # Verificar conexi√≥n
            self.client.admin.command('ping')
            
            self.db = self.client[self.db_name]
            self.collection = self.db[self.collection_name]
            
            print(f"‚úÖ Conectado a MongoDB Atlas")
            print(f"   üìä Base de datos: {self.db_name}")
            print(f"   üìÅ Colecci√≥n: {self.collection_name}")
            
        except (ConnectionFailure, ServerSelectionTimeoutError) as e:
            print(f"‚ùå Error de conexi√≥n a MongoDB: {e}")
            print("\nüí° Verifica:")
            print("   1. Tu connection string en .env")
            print("   2. Network Access en MongoDB Atlas")
            print("   3. Tu conexi√≥n a internet")
            raise
    
    def insert_emotion(self, emotion: str, confidence: float, 
                      metadata: Optional[Dict] = None) -> str:
        """
        Inserta una nueva detecci√≥n de emoci√≥n
        
        Args:
            emotion: Nombre de la emoci√≥n detectada
            confidence: Nivel de confianza (0-1)
            metadata: Datos adicionales opcionales
            
        Returns:
            ID del documento insertado
        """
        try:
            document = {
                'emotion': emotion,
                'confidence': confidence,
                'timestamp': datetime.now(),
                'date': datetime.now().strftime('%Y-%m-%d'),
                'time': datetime.now().strftime('%H:%M:%S'),
                'hour': datetime.now().hour,
                'day_of_week': datetime.now().strftime('%A'),
                'metadata': metadata or {}
            }
            
            result = self.collection.insert_one(document)
            return str(result.inserted_id)
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Error al insertar emoci√≥n: {e}")
            return None
    
    def get_recent_emotions(self, limit: int = 50) -> List[Dict]:
        """
        Obtiene las emociones m√°s recientes
        
        Args:
            limit: N√∫mero m√°ximo de registros a retornar
            
        Returns:
            Lista de documentos de emociones
        """
        try:
            cursor = self.collection.find().sort('timestamp', DESCENDING).limit(limit)
            emotions = list(cursor)
            
            # Convertir ObjectId a string para JSON
            for emotion in emotions:
                emotion['_id'] = str(emotion['_id'])
                
            return emotions
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Error al obtener emociones: {e}")
            return []
    
    def get_emotions_by_date(self, date: str) -> List[Dict]:
        """
        Obtiene todas las emociones de una fecha espec√≠fica
        
        Args:
            date: Fecha en formato 'YYYY-MM-DD'
            
        Returns:
            Lista de documentos
        """
        try:
            cursor = self.collection.find({'date': date}).sort('timestamp', DESCENDING)
            emotions = list(cursor)
            
            for emotion in emotions:
                emotion['_id'] = str(emotion['_id'])
                
            return emotions
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Error al obtener emociones por fecha: {e}")
            return []
    
    def get_emotion_stats(self, hours: int = 24) -> Dict:
        """
        Obtiene estad√≠sticas de emociones en las √∫ltimas N horas
        
        Args:
            hours: N√∫mero de horas hacia atr√°s
            
        Returns:
            Diccionario con estad√≠sticas
        """
        try:
            # Calcular timestamp de inicio
            start_time = datetime.now() - timedelta(hours=hours)
            
            # Agregaci√≥n para contar emociones
            pipeline = [
                {
                    '$match': {
                        'timestamp': {'$gte': start_time}
                    }
                },
                {
                    '$group': {
                        '_id': '$emotion',
                        'count': {'$sum': 1},
                        'avg_confidence': {'$avg': '$confidence'}
                    }
                },
                {
                    '$sort': {'count': -1}
                }
            ]
            
            results = list(self.collection.aggregate(pipeline))
            
            # Formatear resultados
            stats = {
                'period_hours': hours,
                'total_detections': sum(r['count'] for r in results),
                'emotions': {
                    r['_id']: {
                        'count': r['count'],
                        'avg_confidence': round(r['avg_confidence'], 3)
                    }
                    for r in results
                }
            }
            
            # Calcular emoci√≥n dominante
            if results:
                stats['dominant_emotion'] = results[0]['_id']
            else:
                stats['dominant_emotion'] = None
            
            return stats
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Error al calcular estad√≠sticas: {e}")
            return {}
    
    def get_hourly_distribution(self, date: Optional[str] = None) -> Dict:
        """
        Obtiene la distribuci√≥n de emociones por hora
        
        Args:
            date: Fecha espec√≠fica (None para hoy)
            
        Returns:
            Diccionario con distribuci√≥n por hora
        """
        try:
            target_date = date or datetime.now().strftime('%Y-%m-%d')
            
            pipeline = [
                {
                    '$match': {'date': target_date}
                },
                {
                    '$group': {
                        '_id': {
                            'hour': '$hour',
                            'emotion': '$emotion'
                        },
                        'count': {'$sum': 1}
                    }
                },
                {
                    '$sort': {'_id.hour': 1}
                }
            ]
            
            results = list(self.collection.aggregate(pipeline))
            
            # Organizar por hora
            hourly = {}
            for r in results:
                hour = r['_id']['hour']
                emotion = r['_id']['emotion']
                
                if hour not in hourly:
                    hourly[hour] = {}
                
                hourly[hour][emotion] = r['count']
            
            return hourly
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Error al obtener distribuci√≥n horaria: {e}")
            return {}
    
    def test_connection(self) -> bool:
        """
        Prueba la conexi√≥n a MongoDB
        
        Returns:
            True si la conexi√≥n es exitosa
        """
        try:
            self.client.admin.command('ping')
            count = self.collection.count_documents({})
            print(f"‚úÖ Conexi√≥n exitosa. Documentos en colecci√≥n: {count}")
            return True
        except Exception as e:
            print(f"‚ùå Error en conexi√≥n: {e}")
            return False
    
    def close(self):
        """Cierra la conexi√≥n a MongoDB"""
        if self.client:
            self.client.close()
            print("üîå Conexi√≥n a MongoDB cerrada")


# ============================================
# Script de prueba
# ============================================

if __name__ == "__main__":
    """Prueba de conexi√≥n y operaciones b√°sicas"""
    
    print("\n" + "="*60)
    print("üß™ PRUEBA DE CONEXI√ìN A MONGODB ATLAS")
    print("="*60 + "\n")
    
    try:
        # Crear instancia
        db = EmotionDatabase()
        
        # Probar conexi√≥n
        if db.test_connection():
            print("\n‚úÖ ¬°Conexi√≥n exitosa!")
            
            # Insertar emoci√≥n de prueba
            print("\nüìù Insertando emoci√≥n de prueba...")
            emotion_id = db.insert_emotion(
                emotion="Felicidad",
                confidence=0.95,
                metadata={"test": True, "source": "connection_test"}
            )
            
            if emotion_id:
                print(f"‚úÖ Emoci√≥n insertada con ID: {emotion_id}")
            
            # Obtener estad√≠sticas
            print("\nüìä Estad√≠sticas de las √∫ltimas 24 horas:")
            stats = db.get_emotion_stats(hours=24)
            print(f"   Total detecciones: {stats.get('total_detections', 0)}")
            print(f"   Emoci√≥n dominante: {stats.get('dominant_emotion', 'N/A')}")
            
            # Obtener emociones recientes
            print("\nüìã √öltimas 5 emociones registradas:")
            recent = db.get_recent_emotions(limit=5)
            for i, emotion in enumerate(recent, 1):
                print(f"   {i}. {emotion['emotion']} ({emotion['confidence']*100:.1f}%) - {emotion['time']}")
        
        # Cerrar conexi√≥n
        db.close()
        
    except Exception as e:
        print(f"\n‚ùå Error durante la prueba: {e}")
    
    print("\n" + "="*60)
    print("üèÅ Prueba finalizada")
    print("="*60 + "\n")